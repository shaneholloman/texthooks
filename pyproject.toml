[build-system]
requires = ["flit-core>=3.11"]
build-backend = "flit_core.buildapi"

# --- project table and sub-tables

[project]
name = "texthooks"
requires-python = ">=3.8"
version = "0.7.1"
description = "pre-commit fixers and linters for handling text files"
readme = "README.md"
keywords = []
authors = [
  { name = "Stephen Rosen", email = "sirosen0@gmail.com" },
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = ["identify>=2.0,<3.0"]

[project.urls]
source = "https://github.com/sirosen/texthooks"

[project.scripts]
alphabetize-codeowners = "texthooks.alphabetize_codeowners:main"
fix-smartquotes = "texthooks.fix_smartquotes:main"
fix-spaces = "texthooks.fix_spaces:main"
fix-ligatures = "texthooks.fix_ligatures:main"
fix-unicode-dashes = "texthooks.fix_unicode_dashes:main"
forbid-bidi-controls = "texthooks.forbid_bidi_controls:main"
macro-expand = "texthooks.macro_expand:main"

# --- dependency groups
[dependency-groups]
coverage = ["coverage[toml]"]
test = [
    "pytest<9",
    "pytest-cov<7",
    "pytest-xdist<4",
    { include-group = "coverage" },
]
typing = ["mypy"]
publish = ["twine", "build"]


# --- build backend configuration

[tool.flit.sdist]
include = ["LICENSE.txt", "tests/*.py", "tox.ini"]

# --- non-build tool configs

[tool.isort]
profile = "black"

[tool.mypy]
# strict = true
files = ["src"]
ignore_missing_imports = true


[tool.coverage.run]
parallel = true

[tool.coverage.report]
show_missing = true
exclude_lines = [
    # the pragma to disable coverage
    "pragma: no cover",
    # don't complain if tests don't hit unimplemented methods/modes
    "raise NotImplementedError",
    # don't check on executable components of importable modules
    "if __name__ == .__main__.:",
    # don't check coverage on type checking conditionals
    "if t.TYPE_CHECKING:",
    # skip overloads
    "@t.overload",
]
